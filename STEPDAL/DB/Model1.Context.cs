//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STEPDAL.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CEIDBEntities : DbContext
    {
        public CEIDBEntities()
            : base("name=CEIDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TblAgencyBioMetricMaster> TblAgencyBioMetricMasters { get; set; }
        public virtual DbSet<TblAttendance> TblAttendances { get; set; }
        public virtual DbSet<TblAttendance_SSTC> TblAttendance_SSTC { get; set; }
        public virtual DbSet<TblAttendancePunchIn> TblAttendancePunchIns { get; set; }
        public virtual DbSet<TblEvaluationTypeMaster> TblEvaluationTypeMasters { get; set; }
        public virtual DbSet<TblFaculty> TblFaculties { get; set; }
        public virtual DbSet<tblLanguageMaster> tblLanguageMasters { get; set; }
        public virtual DbSet<TblLogBeforeSaveQuestion> TblLogBeforeSaveQuestions { get; set; }
        public virtual DbSet<TblLogReport_Candidates> TblLogReport_Candidates { get; set; }
        public virtual DbSet<TblLogWhile_AfterSavingQuestions> TblLogWhile_AfterSavingQuestions { get; set; }
        public virtual DbSet<TblPhotoDocumentDtl> TblPhotoDocumentDtls { get; set; }
        public virtual DbSet<tblPrgramMasterDetail> tblPrgramMasterDetails { get; set; }
        public virtual DbSet<TblProgramMaster> TblProgramMasters { get; set; }
        public virtual DbSet<TblProgramTypeMaster> TblProgramTypeMasters { get; set; }
        public virtual DbSet<TblQuestionLanguageDetail> TblQuestionLanguageDetails { get; set; }
        public virtual DbSet<TblQuestionLanguageDetail_Practical> TblQuestionLanguageDetail_Practical { get; set; }
        public virtual DbSet<TblRegistrationData> TblRegistrationDatas { get; set; }
        public virtual DbSet<TblRole> TblRoles { get; set; }
        public virtual DbSet<TblRTCMaster> TblRTCMasters { get; set; }
        public virtual DbSet<TblSetMaster> TblSetMasters { get; set; }
        public virtual DbSet<TblSSTC_CourseClosure> TblSSTC_CourseClosure { get; set; }
        public virtual DbSet<TblSSTC_Marks> TblSSTC_Marks { get; set; }
        public virtual DbSet<TblStatu> TblStatus { get; set; }
        public virtual DbSet<TblStudentAnswer> TblStudentAnswers { get; set; }
        public virtual DbSet<TblTestDtl> TblTestDtls { get; set; }
        public virtual DbSet<TblUser> TblUsers { get; set; }
        public virtual DbSet<TblTestHdr> TblTestHdrs { get; set; }
        public virtual DbSet<TblStudentAnswerHdr> TblStudentAnswerHdrs { get; set; }
        public virtual DbSet<TblTestDtl_Evaluation> TblTestDtl_Evaluation { get; set; }
        public virtual DbSet<TblNomination> TblNominations { get; set; }
        public virtual DbSet<TblTestDtl_Practical> TblTestDtl_Practical { get; set; }
        public virtual DbSet<TblUploadError> TblUploadErrors { get; set; }
        public virtual DbSet<TblFeedbackQuestion> TblFeedbackQuestions { get; set; }
        public virtual DbSet<TblProgramTestCalenderDetail_Practical> TblProgramTestCalenderDetail_Practical { get; set; }
        public virtual DbSet<TblAutomationErrorLog> TblAutomationErrorLogs { get; set; }
        public virtual DbSet<TblSubFacultyMaster> TblSubFacultyMasters { get; set; }
        public virtual DbSet<TblFaceRecognitionData> TblFaceRecognitionDatas { get; set; }
        public virtual DbSet<TblVendorMaster> TblVendorMasters { get; set; }
        public virtual DbSet<TblVendorTrainerMaster> TblVendorTrainerMasters { get; set; }
        public virtual DbSet<Tbl_Log_Report_DMS> Tbl_Log_Report_DMS { get; set; }
        public virtual DbSet<TblProgramTestCalender> TblProgramTestCalenders { get; set; }
        public virtual DbSet<TblProgramTestCalenderDetail> TblProgramTestCalenderDetails { get; set; }
    
        public virtual ObjectResult<sp_AttendanceReport_Result> sp_AttendanceReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceReport_Result>("sp_AttendanceReport");
        }
    
        public virtual int SP_BatchJobSessionIDWise()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BatchJobSessionIDWise");
        }
    
        public virtual int SP_BatchJobWith_Practical()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BatchJobWith_Practical");
        }
    
        public virtual ObjectResult<SP_CheckAttendanceByDate_Result> SP_CheckAttendanceByDate(string agencyCode, Nullable<System.DateTime> date, string mSPIN)
        {
            var agencyCodeParameter = agencyCode != null ?
                new ObjectParameter("AgencyCode", agencyCode) :
                new ObjectParameter("AgencyCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CheckAttendanceByDate_Result>("SP_CheckAttendanceByDate", agencyCodeParameter, dateParameter, mSPINParameter);
        }
    
        public virtual ObjectResult<sp_CheckIfAnyTestIsGoingOn_Result> sp_CheckIfAnyTestIsGoingOn(string mSPIN, string sessionId)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckIfAnyTestIsGoingOn_Result>("sp_CheckIfAnyTestIsGoingOn", mSPINParameter, sessionIdParameter);
        }
    
        public virtual ObjectResult<sp_CheckQuestionDuplicacy_Result> sp_CheckQuestionDuplicacy(Nullable<int> programTestCalenderId, string question, string answer1, string answer2, string answer3, string answer4)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var answer1Parameter = answer1 != null ?
                new ObjectParameter("Answer1", answer1) :
                new ObjectParameter("Answer1", typeof(string));
    
            var answer2Parameter = answer2 != null ?
                new ObjectParameter("Answer2", answer2) :
                new ObjectParameter("Answer2", typeof(string));
    
            var answer3Parameter = answer3 != null ?
                new ObjectParameter("Answer3", answer3) :
                new ObjectParameter("Answer3", typeof(string));
    
            var answer4Parameter = answer4 != null ?
                new ObjectParameter("Answer4", answer4) :
                new ObjectParameter("Answer4", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckQuestionDuplicacy_Result>("sp_CheckQuestionDuplicacy", programTestCalenderIdParameter, questionParameter, answer1Parameter, answer2Parameter, answer3Parameter, answer4Parameter);
        }
    
        public virtual ObjectResult<Sp_CheckStatus_Result> Sp_CheckStatus(string mSPIN, Nullable<int> day)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CheckStatus_Result>("Sp_CheckStatus", mSPINParameter, dayParameter);
        }
    
        public virtual ObjectResult<SP_CheckTblLogReport_Candidates_Result> SP_CheckTblLogReport_Candidates(string mSPIN, Nullable<int> day, string sessionID)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CheckTblLogReport_Candidates_Result>("SP_CheckTblLogReport_Candidates", mSPINParameter, dayParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_CheckTblStudentAnswerHdr_Result> SP_CheckTblStudentAnswerHdr(string mSPIN, Nullable<int> day, string sessionID)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CheckTblStudentAnswerHdr_Result>("SP_CheckTblStudentAnswerHdr", mSPINParameter, dayParameter, sessionIDParameter);
        }
    
        public virtual int SP_CheckTblZone(string zoneName)
        {
            var zoneNameParameter = zoneName != null ?
                new ObjectParameter("ZoneName", zoneName) :
                new ObjectParameter("ZoneName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckTblZone", zoneNameParameter);
        }
    
        public virtual ObjectResult<sp_FacultyProgramDetails_Result> sp_FacultyProgramDetails(string facultyCode)
        {
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FacultyProgramDetails_Result>("sp_FacultyProgramDetails", facultyCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetAgencyList_Result> sp_GetAgencyList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAgencyList_Result>("sp_GetAgencyList");
        }
    
        public virtual ObjectResult<sp_GetAgencyWiseFaculty_Result> sp_GetAgencyWiseFaculty(Nullable<int> agency_Id)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAgencyWiseFaculty_Result>("sp_GetAgencyWiseFaculty", agency_IdParameter);
        }
    
        public virtual ObjectResult<sp_GetAttendanceReport_Result> sp_GetAttendanceReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> agency_Id, string sessionID, Nullable<int> faculty_Id, Nullable<int> program_Id)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var faculty_IdParameter = faculty_Id.HasValue ?
                new ObjectParameter("Faculty_Id", faculty_Id) :
                new ObjectParameter("Faculty_Id", typeof(int));
    
            var program_IdParameter = program_Id.HasValue ?
                new ObjectParameter("Program_Id", program_Id) :
                new ObjectParameter("Program_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAttendanceReport_Result>("sp_GetAttendanceReport", startDateParameter, endDateParameter, agency_IdParameter, sessionIDParameter, faculty_IdParameter, program_IdParameter);
        }
    
        public virtual ObjectResult<SP_GetCandidateListBySessionId_Result> SP_GetCandidateListBySessionId(string sessionID)
        {
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCandidateListBySessionId_Result>("SP_GetCandidateListBySessionId", sessionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCandidatesListDayWise_Result> sp_GetCandidatesListDayWise()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCandidatesListDayWise_Result>("sp_GetCandidatesListDayWise");
        }
    
        public virtual int Sp_GetCity(Nullable<int> regionId)
        {
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GetCity", regionIdParameter);
        }
    
        public virtual ObjectResult<sp_GetDaySequence_SSTC_Result> sp_GetDaySequence_SSTC(string sessionID)
        {
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDaySequence_SSTC_Result>("sp_GetDaySequence_SSTC", sessionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDayWiseMarksReport_Result> sp_GetDayWiseMarksReport(Nullable<int> agency_Id, Nullable<int> faculty_Id, string sessionID, Nullable<int> program_Id, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var faculty_IdParameter = faculty_Id.HasValue ?
                new ObjectParameter("Faculty_Id", faculty_Id) :
                new ObjectParameter("Faculty_Id", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var program_IdParameter = program_Id.HasValue ?
                new ObjectParameter("Program_Id", program_Id) :
                new ObjectParameter("Program_Id", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDayWiseMarksReport_Result>("sp_GetDayWiseMarksReport", agency_IdParameter, faculty_IdParameter, sessionIDParameter, program_IdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetDayWisePracticalMarkSheet_Result> sp_GetDayWisePracticalMarkSheet(string mSPIN, string sessionId, Nullable<int> day)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDayWisePracticalMarkSheet_Result>("sp_GetDayWisePracticalMarkSheet", mSPINParameter, sessionIdParameter, dayParameter);
        }
    
        public virtual int Sp_GetDealerOutletDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GetDealerOutletDetail");
        }
    
        public virtual ObjectResult<sp_GetEligibleCandidatesForEvaluation_Result> sp_GetEligibleCandidatesForEvaluation(Nullable<int> programTestCalenderId)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEligibleCandidatesForEvaluation_Result>("sp_GetEligibleCandidatesForEvaluation", programTestCalenderIdParameter);
        }
    
        public virtual ObjectResult<SP_GetEvaluationTypePrograms_Result> SP_GetEvaluationTypePrograms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEvaluationTypePrograms_Result>("SP_GetEvaluationTypePrograms");
        }
    
        public virtual ObjectResult<sp_GetFacultyList_Result> sp_GetFacultyList(Nullable<int> agency_Id)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFacultyList_Result>("sp_GetFacultyList", agency_IdParameter);
        }
    
        public virtual ObjectResult<Sp_GetLanguage_Result> Sp_GetLanguage(Nullable<int> programId)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("programId", programId) :
                new ObjectParameter("programId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetLanguage_Result>("Sp_GetLanguage", programIdParameter);
        }
    
        public virtual ObjectResult<sp_GetMarksReport_Result> sp_GetMarksReport(Nullable<int> agency_Id, Nullable<int> faculty_Id, string sessionID, Nullable<int> program_Id, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var faculty_IdParameter = faculty_Id.HasValue ?
                new ObjectParameter("Faculty_Id", faculty_Id) :
                new ObjectParameter("Faculty_Id", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var program_IdParameter = program_Id.HasValue ?
                new ObjectParameter("Program_Id", program_Id) :
                new ObjectParameter("Program_Id", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMarksReport_Result>("sp_GetMarksReport", agency_IdParameter, faculty_IdParameter, sessionIDParameter, program_IdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetNominationList_Result> sp_GetNominationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetNominationList_Result>("sp_GetNominationList");
        }
    
        public virtual ObjectResult<sp_GetProgramList_Result> sp_GetProgramList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProgramList_Result>("sp_GetProgramList");
        }
    
        public virtual ObjectResult<sp_GetQuestionCountAgainstProgramTestCalender_Result> sp_GetQuestionCountAgainstProgramTestCalender(Nullable<int> programTestCalenderId)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQuestionCountAgainstProgramTestCalender_Result>("sp_GetQuestionCountAgainstProgramTestCalender", programTestCalenderIdParameter);
        }
    
        public virtual ObjectResult<SP_GetQuestionListFromTblSA_Result> SP_GetQuestionListFromTblSA(string mSPIN, string sessionID, Nullable<int> day, Nullable<int> languageMaster_Id)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var languageMaster_IdParameter = languageMaster_Id.HasValue ?
                new ObjectParameter("LanguageMaster_Id", languageMaster_Id) :
                new ObjectParameter("LanguageMaster_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetQuestionListFromTblSA_Result>("SP_GetQuestionListFromTblSA", mSPINParameter, sessionIDParameter, dayParameter, languageMaster_IdParameter);
        }
    
        public virtual ObjectResult<SP_GetQuestionListFromTblSA_Practical_Result> SP_GetQuestionListFromTblSA_Practical(string mSPIN, string sessionID, Nullable<int> day, Nullable<int> languageMaster_Id)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var languageMaster_IdParameter = languageMaster_Id.HasValue ?
                new ObjectParameter("LanguageMaster_Id", languageMaster_Id) :
                new ObjectParameter("LanguageMaster_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetQuestionListFromTblSA_Practical_Result>("SP_GetQuestionListFromTblSA_Practical", mSPINParameter, sessionIDParameter, dayParameter, languageMaster_IdParameter);
        }
    
        public virtual ObjectResult<SP_GetQuestionListIfExist_Result> SP_GetQuestionListIfExist(string mSPIN, Nullable<int> day, string sessionID)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetQuestionListIfExist_Result>("SP_GetQuestionListIfExist", mSPINParameter, dayParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetRTMDropdownForAdmin_Result> sp_GetRTMDropdownForAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetRTMDropdownForAdmin_Result>("sp_GetRTMDropdownForAdmin");
        }
    
        public virtual ObjectResult<sp_GetSessionIdForResetTest_Result> sp_GetSessionIdForResetTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSessionIdForResetTest_Result>("sp_GetSessionIdForResetTest");
        }
    
        public virtual ObjectResult<sp_GetSessionIDList_Result> sp_GetSessionIDList(Nullable<int> agency_Id, string facultyCode)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSessionIDList_Result>("sp_GetSessionIDList", agency_IdParameter, facultyCodeParameter);
        }
    
        public virtual ObjectResult<SP_GetSessionIdListBy_AgencyId_Result> SP_GetSessionIdListBy_AgencyId(Nullable<int> agency_Id)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSessionIdListBy_AgencyId_Result>("SP_GetSessionIdListBy_AgencyId", agency_IdParameter);
        }
    
        public virtual ObjectResult<SP_GetSessionIdListBy_FacultyCode_Result> SP_GetSessionIdListBy_FacultyCode(Nullable<int> agency_Id, string facultyCode)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSessionIdListBy_FacultyCode_Result>("SP_GetSessionIdListBy_FacultyCode", agency_IdParameter, facultyCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetSessionIDWiseStudentList_Result> sp_GetSessionIDWiseStudentList(string sessionID)
        {
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSessionIDWiseStudentList_Result>("sp_GetSessionIDWiseStudentList", sessionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetSessionList_Result> sp_GetSessionList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSessionList_Result>("sp_GetSessionList");
        }
    
        public virtual ObjectResult<sp_GetSessionListAgencyWise_Result> sp_GetSessionListAgencyWise(Nullable<int> agency_Id)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSessionListAgencyWise_Result>("sp_GetSessionListAgencyWise", agency_IdParameter);
        }
    
        public virtual ObjectResult<sp_GetSetSequenceByProgramTestCalenderId_Result> sp_GetSetSequenceByProgramTestCalenderId(Nullable<int> programTestCalenderId)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSetSequenceByProgramTestCalenderId_Result>("sp_GetSetSequenceByProgramTestCalenderId", programTestCalenderIdParameter);
        }
    
        public virtual ObjectResult<SP_GetStudentDetails_Result> SP_GetStudentDetails(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetStudentDetails_Result>("SP_GetStudentDetails", userNameParameter);
        }
    
        public virtual ObjectResult<sp_GetStudentList_Result> sp_GetStudentList(string facultyCode, string programCode)
        {
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            var programCodeParameter = programCode != null ?
                new ObjectParameter("ProgramCode", programCode) :
                new ObjectParameter("ProgramCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStudentList_Result>("sp_GetStudentList", facultyCodeParameter, programCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetStudentMarksReport_Result> sp_GetStudentMarksReport(Nullable<int> agency_Id, Nullable<int> faculty_Id, string sessionID, Nullable<int> program_Id, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var faculty_IdParameter = faculty_Id.HasValue ?
                new ObjectParameter("Faculty_Id", faculty_Id) :
                new ObjectParameter("Faculty_Id", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var program_IdParameter = program_Id.HasValue ?
                new ObjectParameter("Program_Id", program_Id) :
                new ObjectParameter("Program_Id", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStudentMarksReport_Result>("sp_GetStudentMarksReport", agency_IdParameter, faculty_IdParameter, sessionIDParameter, program_IdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetStudentPostTestScores_Result> sp_GetStudentPostTestScores(string mSPIN)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStudentPostTestScores_Result>("sp_GetStudentPostTestScores", mSPINParameter);
        }
    
        public virtual ObjectResult<sp_GetStudentTestDetails_Result> sp_GetStudentTestDetails(string mSPIN)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStudentTestDetails_Result>("sp_GetStudentTestDetails", mSPINParameter);
        }
    
        public virtual ObjectResult<sp_GetStudentTestDetails_Evaluation_Result> sp_GetStudentTestDetails_Evaluation(string mSPIN, Nullable<int> day)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStudentTestDetails_Evaluation_Result>("sp_GetStudentTestDetails_Evaluation", mSPINParameter, dayParameter);
        }
    
        public virtual ObjectResult<Sp_GetStudentTestLanguageWiseList_Result> Sp_GetStudentTestLanguageWiseList(Nullable<int> programTestCalenderId, Nullable<int> langId)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var langIdParameter = langId.HasValue ?
                new ObjectParameter("LangId", langId) :
                new ObjectParameter("LangId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetStudentTestLanguageWiseList_Result>("Sp_GetStudentTestLanguageWiseList", programTestCalenderIdParameter, langIdParameter);
        }
    
        public virtual ObjectResult<sp_GetStudentTestQuestions_Result> sp_GetStudentTestQuestions(Nullable<int> programTestCalenderId)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStudentTestQuestions_Result>("sp_GetStudentTestQuestions", programTestCalenderIdParameter);
        }
    
        public virtual ObjectResult<SP_GetTestCodesByProgramId_Result> SP_GetTestCodesByProgramId(Nullable<int> programId)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetTestCodesByProgramId_Result>("SP_GetTestCodesByProgramId", programIdParameter);
        }
    
        public virtual ObjectResult<Sp_GetTimeDetails_Result> Sp_GetTimeDetails(string mSPIN)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetTimeDetails_Result>("Sp_GetTimeDetails", mSPINParameter);
        }
    
        public virtual ObjectResult<SP_GetUserDetails_Result> SP_GetUserDetails(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserDetails_Result>("SP_GetUserDetails", userNameParameter, passwordParameter);
        }
    
        public virtual int Sp_GetZoneDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GetZoneDetail");
        }
    
        public virtual int SP_InertInto_TblStudentAnswerHdr(Nullable<int> sA_Id, Nullable<int> programTestCalenderId, Nullable<int> programId, string mSPIN, Nullable<double> remainingTime, Nullable<int> day, string typeOfTest, string sessionID, Nullable<int> status_Id, Nullable<bool> isActive)
        {
            var sA_IdParameter = sA_Id.HasValue ?
                new ObjectParameter("SA_Id", sA_Id) :
                new ObjectParameter("SA_Id", typeof(int));
    
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var remainingTimeParameter = remainingTime.HasValue ?
                new ObjectParameter("RemainingTime", remainingTime) :
                new ObjectParameter("RemainingTime", typeof(double));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var typeOfTestParameter = typeOfTest != null ?
                new ObjectParameter("TypeOfTest", typeOfTest) :
                new ObjectParameter("TypeOfTest", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var status_IdParameter = status_Id.HasValue ?
                new ObjectParameter("Status_Id", status_Id) :
                new ObjectParameter("Status_Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InertInto_TblStudentAnswerHdr", sA_IdParameter, programTestCalenderIdParameter, programIdParameter, mSPINParameter, remainingTimeParameter, dayParameter, typeOfTestParameter, sessionIDParameter, status_IdParameter, isActiveParameter);
        }
    
        public virtual int SP_Insert_Update_TblStudentAnswer(Nullable<int> programTestCalenderId, Nullable<int> programId, Nullable<int> sA_Id, string mSPIN, string questionCode, string answerGiven, string correctAnswer, Nullable<int> day, string typeOfTest, string sessionID, Nullable<bool> isAnswerCorrect, Nullable<bool> isActive)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            var sA_IdParameter = sA_Id.HasValue ?
                new ObjectParameter("SA_Id", sA_Id) :
                new ObjectParameter("SA_Id", typeof(int));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var questionCodeParameter = questionCode != null ?
                new ObjectParameter("QuestionCode", questionCode) :
                new ObjectParameter("QuestionCode", typeof(string));
    
            var answerGivenParameter = answerGiven != null ?
                new ObjectParameter("AnswerGiven", answerGiven) :
                new ObjectParameter("AnswerGiven", typeof(string));
    
            var correctAnswerParameter = correctAnswer != null ?
                new ObjectParameter("CorrectAnswer", correctAnswer) :
                new ObjectParameter("CorrectAnswer", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var typeOfTestParameter = typeOfTest != null ?
                new ObjectParameter("TypeOfTest", typeOfTest) :
                new ObjectParameter("TypeOfTest", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var isAnswerCorrectParameter = isAnswerCorrect.HasValue ?
                new ObjectParameter("IsAnswerCorrect", isAnswerCorrect) :
                new ObjectParameter("IsAnswerCorrect", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_Update_TblStudentAnswer", programTestCalenderIdParameter, programIdParameter, sA_IdParameter, mSPINParameter, questionCodeParameter, answerGivenParameter, correctAnswerParameter, dayParameter, typeOfTestParameter, sessionIDParameter, isAnswerCorrectParameter, isActiveParameter);
        }
    
        public virtual int SP_Insert_Update_TblStudentAnswer_Practical(Nullable<long> sA_Id, Nullable<int> programTestCalenderId, Nullable<int> programId, string mSPIN, string questionCode, Nullable<int> day, string sessionID, string typeOfTest, Nullable<bool> actionA, Nullable<bool> actionB, Nullable<bool> actionC, Nullable<bool> actionD, Nullable<bool> actionE, Nullable<bool> actionF, Nullable<int> marks_A, Nullable<int> marks_B, Nullable<int> marks_C, Nullable<int> marks_D, Nullable<int> marks_E, Nullable<int> marks_F, Nullable<bool> isActive)
        {
            var sA_IdParameter = sA_Id.HasValue ?
                new ObjectParameter("SA_Id", sA_Id) :
                new ObjectParameter("SA_Id", typeof(long));
    
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var questionCodeParameter = questionCode != null ?
                new ObjectParameter("QuestionCode", questionCode) :
                new ObjectParameter("QuestionCode", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var typeOfTestParameter = typeOfTest != null ?
                new ObjectParameter("TypeOfTest", typeOfTest) :
                new ObjectParameter("TypeOfTest", typeof(string));
    
            var actionAParameter = actionA.HasValue ?
                new ObjectParameter("ActionA", actionA) :
                new ObjectParameter("ActionA", typeof(bool));
    
            var actionBParameter = actionB.HasValue ?
                new ObjectParameter("ActionB", actionB) :
                new ObjectParameter("ActionB", typeof(bool));
    
            var actionCParameter = actionC.HasValue ?
                new ObjectParameter("ActionC", actionC) :
                new ObjectParameter("ActionC", typeof(bool));
    
            var actionDParameter = actionD.HasValue ?
                new ObjectParameter("ActionD", actionD) :
                new ObjectParameter("ActionD", typeof(bool));
    
            var actionEParameter = actionE.HasValue ?
                new ObjectParameter("ActionE", actionE) :
                new ObjectParameter("ActionE", typeof(bool));
    
            var actionFParameter = actionF.HasValue ?
                new ObjectParameter("ActionF", actionF) :
                new ObjectParameter("ActionF", typeof(bool));
    
            var marks_AParameter = marks_A.HasValue ?
                new ObjectParameter("Marks_A", marks_A) :
                new ObjectParameter("Marks_A", typeof(int));
    
            var marks_BParameter = marks_B.HasValue ?
                new ObjectParameter("Marks_B", marks_B) :
                new ObjectParameter("Marks_B", typeof(int));
    
            var marks_CParameter = marks_C.HasValue ?
                new ObjectParameter("Marks_C", marks_C) :
                new ObjectParameter("Marks_C", typeof(int));
    
            var marks_DParameter = marks_D.HasValue ?
                new ObjectParameter("Marks_D", marks_D) :
                new ObjectParameter("Marks_D", typeof(int));
    
            var marks_EParameter = marks_E.HasValue ?
                new ObjectParameter("Marks_E", marks_E) :
                new ObjectParameter("Marks_E", typeof(int));
    
            var marks_FParameter = marks_F.HasValue ?
                new ObjectParameter("Marks_F", marks_F) :
                new ObjectParameter("Marks_F", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_Update_TblStudentAnswer_Practical", sA_IdParameter, programTestCalenderIdParameter, programIdParameter, mSPINParameter, questionCodeParameter, dayParameter, sessionIDParameter, typeOfTestParameter, actionAParameter, actionBParameter, actionCParameter, actionDParameter, actionEParameter, actionFParameter, marks_AParameter, marks_BParameter, marks_CParameter, marks_DParameter, marks_EParameter, marks_FParameter, isActiveParameter);
        }
    
        public virtual int SP_Insert_Update_TblStudentAnswerHdr(Nullable<int> programTestCalenderId, Nullable<int> programId, string typeOfTest, string mSPIN, Nullable<double> remainingTime, Nullable<int> day, string sessionID, Nullable<int> status_Id)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            var typeOfTestParameter = typeOfTest != null ?
                new ObjectParameter("TypeOfTest", typeOfTest) :
                new ObjectParameter("TypeOfTest", typeof(string));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var remainingTimeParameter = remainingTime.HasValue ?
                new ObjectParameter("RemainingTime", remainingTime) :
                new ObjectParameter("RemainingTime", typeof(double));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var status_IdParameter = status_Id.HasValue ?
                new ObjectParameter("Status_Id", status_Id) :
                new ObjectParameter("Status_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_Update_TblStudentAnswerHdr", programTestCalenderIdParameter, programIdParameter, typeOfTestParameter, mSPINParameter, remainingTimeParameter, dayParameter, sessionIDParameter, status_IdParameter);
        }
    
        public virtual int Sp_InsertQuestionLanguage(Nullable<int> detailId, Nullable<int> programTestCalenderId, string question, string answer1, string answer2, string answer3, string answer4, string answerkEY, Nullable<int> langid, Nullable<int> cretedBy)
        {
            var detailIdParameter = detailId.HasValue ?
                new ObjectParameter("DetailId", detailId) :
                new ObjectParameter("DetailId", typeof(int));
    
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var answer1Parameter = answer1 != null ?
                new ObjectParameter("answer1", answer1) :
                new ObjectParameter("answer1", typeof(string));
    
            var answer2Parameter = answer2 != null ?
                new ObjectParameter("answer2", answer2) :
                new ObjectParameter("answer2", typeof(string));
    
            var answer3Parameter = answer3 != null ?
                new ObjectParameter("answer3", answer3) :
                new ObjectParameter("answer3", typeof(string));
    
            var answer4Parameter = answer4 != null ?
                new ObjectParameter("answer4", answer4) :
                new ObjectParameter("answer4", typeof(string));
    
            var answerkEYParameter = answerkEY != null ?
                new ObjectParameter("answerkEY", answerkEY) :
                new ObjectParameter("answerkEY", typeof(string));
    
            var langidParameter = langid.HasValue ?
                new ObjectParameter("Langid", langid) :
                new ObjectParameter("Langid", typeof(int));
    
            var cretedByParameter = cretedBy.HasValue ?
                new ObjectParameter("CretedBy", cretedBy) :
                new ObjectParameter("CretedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertQuestionLanguage", detailIdParameter, programTestCalenderIdParameter, questionParameter, answer1Parameter, answer2Parameter, answer3Parameter, answer4Parameter, answerkEYParameter, langidParameter, cretedByParameter);
        }
    
        public virtual int Sp_InsertQuestionLanguage_Practical(Nullable<int> detailId, Nullable<int> programTestCalenderId, string questionCode, Nullable<int> langid, Nullable<int> set_Id, string question, string actionA, string actionB, string actionC, string actionD, string actionE, string actionF, Nullable<int> createdBy)
        {
            var detailIdParameter = detailId.HasValue ?
                new ObjectParameter("DetailId", detailId) :
                new ObjectParameter("DetailId", typeof(int));
    
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var questionCodeParameter = questionCode != null ?
                new ObjectParameter("QuestionCode", questionCode) :
                new ObjectParameter("QuestionCode", typeof(string));
    
            var langidParameter = langid.HasValue ?
                new ObjectParameter("Langid", langid) :
                new ObjectParameter("Langid", typeof(int));
    
            var set_IdParameter = set_Id.HasValue ?
                new ObjectParameter("Set_Id", set_Id) :
                new ObjectParameter("Set_Id", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var actionAParameter = actionA != null ?
                new ObjectParameter("ActionA", actionA) :
                new ObjectParameter("ActionA", typeof(string));
    
            var actionBParameter = actionB != null ?
                new ObjectParameter("ActionB", actionB) :
                new ObjectParameter("ActionB", typeof(string));
    
            var actionCParameter = actionC != null ?
                new ObjectParameter("ActionC", actionC) :
                new ObjectParameter("ActionC", typeof(string));
    
            var actionDParameter = actionD != null ?
                new ObjectParameter("ActionD", actionD) :
                new ObjectParameter("ActionD", typeof(string));
    
            var actionEParameter = actionE != null ?
                new ObjectParameter("ActionE", actionE) :
                new ObjectParameter("ActionE", typeof(string));
    
            var actionFParameter = actionF != null ?
                new ObjectParameter("ActionF", actionF) :
                new ObjectParameter("ActionF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertQuestionLanguage_Practical", detailIdParameter, programTestCalenderIdParameter, questionCodeParameter, langidParameter, set_IdParameter, questionParameter, actionAParameter, actionBParameter, actionCParameter, actionDParameter, actionEParameter, actionFParameter, createdByParameter);
        }
    
        public virtual int sp_Inset_Update_TblSSTCMarks(string mSPIN, string sessionID, Nullable<int> day, Nullable<int> marks, Nullable<int> programTestCalenderId, Nullable<int> programId, Nullable<int> createdBy, Nullable<System.DateTime> creationDate)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var marksParameter = marks.HasValue ?
                new ObjectParameter("Marks", marks) :
                new ObjectParameter("Marks", typeof(int));
    
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inset_Update_TblSSTCMarks", mSPINParameter, sessionIDParameter, dayParameter, marksParameter, programTestCalenderIdParameter, programIdParameter, createdByParameter, creationDateParameter);
        }
    
        public virtual ObjectResult<Sp_PracticalQuestion_Detail_Result> Sp_PracticalQuestion_Detail(Nullable<int> programTestCalenderId, Nullable<int> set_Id, Nullable<int> languageMaster_Id)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var set_IdParameter = set_Id.HasValue ?
                new ObjectParameter("Set_Id", set_Id) :
                new ObjectParameter("Set_Id", typeof(int));
    
            var languageMaster_IdParameter = languageMaster_Id.HasValue ?
                new ObjectParameter("LanguageMaster_Id", languageMaster_Id) :
                new ObjectParameter("LanguageMaster_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PracticalQuestion_Detail_Result>("Sp_PracticalQuestion_Detail", programTestCalenderIdParameter, set_IdParameter, languageMaster_IdParameter);
        }
    
        public virtual ObjectResult<sp_ProgramMaster_Result> sp_ProgramMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProgramMaster_Result>("sp_ProgramMaster");
        }
    
        public virtual ObjectResult<Sp_ProgramTestCalenderDetail_Result> Sp_ProgramTestCalenderDetail(Nullable<int> programId)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ProgramTestCalenderDetail_Result>("Sp_ProgramTestCalenderDetail", programIdParameter);
        }
    
        public virtual int Sp_Region_City()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Region_City");
        }
    
        public virtual int sp_ResetStudentLogin(string mSPIN, Nullable<int> day)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ResetStudentLogin", mSPINParameter, dayParameter);
        }
    
        public virtual ObjectResult<sp_SessionIDsForManage_Result> sp_SessionIDsForManage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SessionIDsForManage_Result>("sp_SessionIDsForManage");
        }
    
        public virtual int sp_TruncateTblNomination()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TruncateTblNomination");
        }
    
        public virtual int sp_Update_InsertIntoTblAttendance_SSTC(string mSPIN, Nullable<System.DateTime> dateTime, string sessionId, Nullable<int> day)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_InsertIntoTblAttendance_SSTC", mSPINParameter, dateTimeParameter, sessionIdParameter, dayParameter);
        }
    
        public virtual int sp_Update_InsertIntoTblAttendancePunchIn(string mSPIN, string agencyCode, Nullable<System.DateTime> dateTime, string machineCode, Nullable<int> machineId)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var agencyCodeParameter = agencyCode != null ?
                new ObjectParameter("AgencyCode", agencyCode) :
                new ObjectParameter("AgencyCode", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var machineCodeParameter = machineCode != null ?
                new ObjectParameter("MachineCode", machineCode) :
                new ObjectParameter("MachineCode", typeof(string));
    
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_InsertIntoTblAttendancePunchIn", mSPINParameter, agencyCodeParameter, dateTimeParameter, machineCodeParameter, machineIdParameter);
        }
    
        public virtual int sp_UpdateNomination(string sessionID, Nullable<System.DateTime> endDate)
        {
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateNomination", sessionIDParameter, endDateParameter);
        }
    
        public virtual int Sp_UpdateQuestionLanguage(Nullable<int> detailId, Nullable<int> programTestCalenderId, string question, string answer1, string answer2, string answer3, string answer4, string answerkEY, Nullable<int> langid, Nullable<int> modifiedBy)
        {
            var detailIdParameter = detailId.HasValue ?
                new ObjectParameter("DetailId", detailId) :
                new ObjectParameter("DetailId", typeof(int));
    
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var answer1Parameter = answer1 != null ?
                new ObjectParameter("answer1", answer1) :
                new ObjectParameter("answer1", typeof(string));
    
            var answer2Parameter = answer2 != null ?
                new ObjectParameter("answer2", answer2) :
                new ObjectParameter("answer2", typeof(string));
    
            var answer3Parameter = answer3 != null ?
                new ObjectParameter("answer3", answer3) :
                new ObjectParameter("answer3", typeof(string));
    
            var answer4Parameter = answer4 != null ?
                new ObjectParameter("answer4", answer4) :
                new ObjectParameter("answer4", typeof(string));
    
            var answerkEYParameter = answerkEY != null ?
                new ObjectParameter("answerkEY", answerkEY) :
                new ObjectParameter("answerkEY", typeof(string));
    
            var langidParameter = langid.HasValue ?
                new ObjectParameter("Langid", langid) :
                new ObjectParameter("Langid", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateQuestionLanguage", detailIdParameter, programTestCalenderIdParameter, questionParameter, answer1Parameter, answer2Parameter, answer3Parameter, answer4Parameter, answerkEYParameter, langidParameter, modifiedByParameter);
        }
    
        public virtual int Sp_UpdateQuestionLanguage_Practical(Nullable<int> detailId, Nullable<int> programTestCalenderId, string questionCode, Nullable<int> langid, Nullable<int> set_Id, string question, string actionA, string actionB, string actionC, string actionD, string actionE, string actionF, Nullable<int> modifiedBy)
        {
            var detailIdParameter = detailId.HasValue ?
                new ObjectParameter("DetailId", detailId) :
                new ObjectParameter("DetailId", typeof(int));
    
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var questionCodeParameter = questionCode != null ?
                new ObjectParameter("QuestionCode", questionCode) :
                new ObjectParameter("QuestionCode", typeof(string));
    
            var langidParameter = langid.HasValue ?
                new ObjectParameter("Langid", langid) :
                new ObjectParameter("Langid", typeof(int));
    
            var set_IdParameter = set_Id.HasValue ?
                new ObjectParameter("Set_Id", set_Id) :
                new ObjectParameter("Set_Id", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var actionAParameter = actionA != null ?
                new ObjectParameter("ActionA", actionA) :
                new ObjectParameter("ActionA", typeof(string));
    
            var actionBParameter = actionB != null ?
                new ObjectParameter("ActionB", actionB) :
                new ObjectParameter("ActionB", typeof(string));
    
            var actionCParameter = actionC != null ?
                new ObjectParameter("ActionC", actionC) :
                new ObjectParameter("ActionC", typeof(string));
    
            var actionDParameter = actionD != null ?
                new ObjectParameter("ActionD", actionD) :
                new ObjectParameter("ActionD", typeof(string));
    
            var actionEParameter = actionE != null ?
                new ObjectParameter("ActionE", actionE) :
                new ObjectParameter("ActionE", typeof(string));
    
            var actionFParameter = actionF != null ?
                new ObjectParameter("ActionF", actionF) :
                new ObjectParameter("ActionF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateQuestionLanguage_Practical", detailIdParameter, programTestCalenderIdParameter, questionCodeParameter, langidParameter, set_IdParameter, questionParameter, actionAParameter, actionBParameter, actionCParameter, actionDParameter, actionEParameter, actionFParameter, modifiedByParameter);
        }
    
        public virtual int SP_UpdateTblStudentAnswerHdr(Nullable<int> sA_Id, string mSPIN, Nullable<double> remainingTime, Nullable<int> day, string sessionID, Nullable<int> status_Id, Nullable<bool> isActive)
        {
            var sA_IdParameter = sA_Id.HasValue ?
                new ObjectParameter("SA_Id", sA_Id) :
                new ObjectParameter("SA_Id", typeof(int));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var remainingTimeParameter = remainingTime.HasValue ?
                new ObjectParameter("RemainingTime", remainingTime) :
                new ObjectParameter("RemainingTime", typeof(double));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var status_IdParameter = status_Id.HasValue ?
                new ObjectParameter("Status_Id", status_Id) :
                new ObjectParameter("Status_Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateTblStudentAnswerHdr", sA_IdParameter, mSPINParameter, remainingTimeParameter, dayParameter, sessionIDParameter, status_IdParameter, isActiveParameter);
        }
    
        public virtual int sp_UpdateTblTestDtl_Evaluation(string mSPIN, string sessionId, Nullable<int> day)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateTblTestDtl_Evaluation", mSPINParameter, sessionIdParameter, dayParameter);
        }
    
        public virtual int sp_GeneratePracticalQuestions(string mSPIN, Nullable<int> programId, Nullable<int> programTestCalenderId, string sessionID, Nullable<int> day, Nullable<int> languageMaster_Id, string typeOfTest, Nullable<int> set_Id)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var languageMaster_IdParameter = languageMaster_Id.HasValue ?
                new ObjectParameter("LanguageMaster_Id", languageMaster_Id) :
                new ObjectParameter("LanguageMaster_Id", typeof(int));
    
            var typeOfTestParameter = typeOfTest != null ?
                new ObjectParameter("TypeOfTest", typeOfTest) :
                new ObjectParameter("TypeOfTest", typeof(string));
    
            var set_IdParameter = set_Id.HasValue ?
                new ObjectParameter("Set_Id", set_Id) :
                new ObjectParameter("Set_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GeneratePracticalQuestions", mSPINParameter, programIdParameter, programTestCalenderIdParameter, sessionIDParameter, dayParameter, languageMaster_IdParameter, typeOfTestParameter, set_IdParameter);
        }
    
        public virtual ObjectResult<sp_GetSessionListByProgramId_Result> sp_GetSessionListByProgramId(Nullable<int> programId)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSessionListByProgramId_Result>("sp_GetSessionListByProgramId", programIdParameter);
        }
    
        public virtual ObjectResult<sp_Get_IfAbesnt_Result> sp_Get_IfAbesnt(string mSPIN, string sessionID)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_IfAbesnt_Result>("sp_Get_IfAbesnt", mSPINParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetUploadErrors_Result> sp_GetUploadErrors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUploadErrors_Result>("sp_GetUploadErrors");
        }
    
        public virtual int sp_UpdadeUploadErrors(string columnName, string value, Nullable<System.DateTime> creationDate, Nullable<bool> isActive)
        {
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdadeUploadErrors", columnNameParameter, valueParameter, creationDateParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<SP_CheckMSPIN_Registered_NotRegistered_Result> SP_CheckMSPIN_Registered_NotRegistered(string agencyCode, string mSPIN)
        {
            var agencyCodeParameter = agencyCode != null ?
                new ObjectParameter("AgencyCode", agencyCode) :
                new ObjectParameter("AgencyCode", typeof(string));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CheckMSPIN_Registered_NotRegistered_Result>("SP_CheckMSPIN_Registered_NotRegistered", agencyCodeParameter, mSPINParameter);
        }
    
        public virtual int SP_InsertIntoTblRegistrationData(string mSPIN, byte[] thumb_1, byte[] thumb_2, byte[] candidate_Image, byte[] document_Image, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var thumb_1Parameter = thumb_1 != null ?
                new ObjectParameter("Thumb_1", thumb_1) :
                new ObjectParameter("Thumb_1", typeof(byte[]));
    
            var thumb_2Parameter = thumb_2 != null ?
                new ObjectParameter("Thumb_2", thumb_2) :
                new ObjectParameter("Thumb_2", typeof(byte[]));
    
            var candidate_ImageParameter = candidate_Image != null ?
                new ObjectParameter("Candidate_Image", candidate_Image) :
                new ObjectParameter("Candidate_Image", typeof(byte[]));
    
            var document_ImageParameter = document_Image != null ?
                new ObjectParameter("Document_Image", document_Image) :
                new ObjectParameter("Document_Image", typeof(byte[]));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertIntoTblRegistrationData", mSPINParameter, thumb_1Parameter, thumb_2Parameter, candidate_ImageParameter, document_ImageParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<SP_GETGuardLoginDetails_Result> SP_GETGuardLoginDetails(string user, string pass)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETGuardLoginDetails_Result>("SP_GETGuardLoginDetails", userParameter, passParameter);
        }
    
        public virtual ObjectResult<sp_GetFeedBackQueSet_Result> sp_GetFeedBackQueSet(Nullable<int> programId)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFeedBackQueSet_Result>("sp_GetFeedBackQueSet", programIdParameter);
        }
    
        public virtual int sp_Insert_Update_TblFeedbackCaptured(Nullable<long> feedbackQuestion_Id, string mSPIN, string sessionID, Nullable<int> rating, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var feedbackQuestion_IdParameter = feedbackQuestion_Id.HasValue ?
                new ObjectParameter("FeedbackQuestion_Id", feedbackQuestion_Id) :
                new ObjectParameter("FeedbackQuestion_Id", typeof(long));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Update_TblFeedbackCaptured", feedbackQuestion_IdParameter, mSPINParameter, sessionIDParameter, ratingParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual int sp_InsertFeedbackQuestions(Nullable<int> programId, Nullable<int> programTestCalenderId, string question, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> creationDate)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertFeedbackQuestions", programIdParameter, programTestCalenderIdParameter, questionParameter, isActiveParameter, createdByParameter, creationDateParameter);
        }
    
        public virtual ObjectResult<sp_GetServiceTypes_Result> sp_GetServiceTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetServiceTypes_Result>("sp_GetServiceTypes");
        }
    
        public virtual int SP_Insert_Update_TblStudentAnswerHdr_V2(Nullable<int> programTestCalenderId, Nullable<int> programId, string typeOfTest, string mSPIN, Nullable<double> remainingTime, Nullable<int> day, string sessionID, Nullable<int> status_Id, Nullable<int> extendedTime, Nullable<int> position_Id)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            var typeOfTestParameter = typeOfTest != null ?
                new ObjectParameter("TypeOfTest", typeOfTest) :
                new ObjectParameter("TypeOfTest", typeof(string));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var remainingTimeParameter = remainingTime.HasValue ?
                new ObjectParameter("RemainingTime", remainingTime) :
                new ObjectParameter("RemainingTime", typeof(double));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var status_IdParameter = status_Id.HasValue ?
                new ObjectParameter("Status_Id", status_Id) :
                new ObjectParameter("Status_Id", typeof(int));
    
            var extendedTimeParameter = extendedTime.HasValue ?
                new ObjectParameter("ExtendedTime", extendedTime) :
                new ObjectParameter("ExtendedTime", typeof(int));
    
            var position_IdParameter = position_Id.HasValue ?
                new ObjectParameter("Position_Id", position_Id) :
                new ObjectParameter("Position_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_Update_TblStudentAnswerHdr_V2", programTestCalenderIdParameter, programIdParameter, typeOfTestParameter, mSPINParameter, remainingTimeParameter, dayParameter, sessionIDParameter, status_IdParameter, extendedTimeParameter, position_IdParameter);
        }
    
        public virtual int sp_InsertUpdate_TblNominationDownload(string co_id, string region, string venue, string dealer_LocationCode, string dealerName, string city, string location, string agencyCode, string facultyCode, string programCode, string sessionID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> duration, string mSPIN, string name, Nullable<System.DateTime> dateofBirth, string mobileNo, Nullable<bool> isActive, Nullable<System.DateTime> creationDate, Nullable<int> createdBy)
        {
            var co_idParameter = co_id != null ?
                new ObjectParameter("Co_id", co_id) :
                new ObjectParameter("Co_id", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var venueParameter = venue != null ?
                new ObjectParameter("Venue", venue) :
                new ObjectParameter("Venue", typeof(string));
    
            var dealer_LocationCodeParameter = dealer_LocationCode != null ?
                new ObjectParameter("Dealer_LocationCode", dealer_LocationCode) :
                new ObjectParameter("Dealer_LocationCode", typeof(string));
    
            var dealerNameParameter = dealerName != null ?
                new ObjectParameter("DealerName", dealerName) :
                new ObjectParameter("DealerName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var agencyCodeParameter = agencyCode != null ?
                new ObjectParameter("AgencyCode", agencyCode) :
                new ObjectParameter("AgencyCode", typeof(string));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            var programCodeParameter = programCode != null ?
                new ObjectParameter("ProgramCode", programCode) :
                new ObjectParameter("ProgramCode", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateofBirthParameter = dateofBirth.HasValue ?
                new ObjectParameter("DateofBirth", dateofBirth) :
                new ObjectParameter("DateofBirth", typeof(System.DateTime));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdate_TblNominationDownload", co_idParameter, regionParameter, venueParameter, dealer_LocationCodeParameter, dealerNameParameter, cityParameter, locationParameter, agencyCodeParameter, facultyCodeParameter, programCodeParameter, sessionIDParameter, startDateParameter, endDateParameter, durationParameter, mSPINParameter, nameParameter, dateofBirthParameter, mobileNoParameter, isActiveParameter, creationDateParameter, createdByParameter);
        }
    
        public virtual int sp_InsertIntoTblAutomationErrorLogs(string errorType, string value, Nullable<bool> isActive, Nullable<System.DateTime> creationDate, Nullable<int> createdBy)
        {
            var errorTypeParameter = errorType != null ?
                new ObjectParameter("ErrorType", errorType) :
                new ObjectParameter("ErrorType", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertIntoTblAutomationErrorLogs", errorTypeParameter, valueParameter, isActiveParameter, creationDateParameter, createdByParameter);
        }
    
        public virtual ObjectResult<sp_GetNominationListFromDownload_Result> sp_GetNominationListFromDownload(Nullable<System.DateTime> creationDate)
        {
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetNominationListFromDownload_Result>("sp_GetNominationListFromDownload", creationDateParameter);
        }
    
        public virtual int sp_DeleteQuestionForMSPINandSessionID(string mSPIN, string sessionID, Nullable<int> programId, Nullable<int> day)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteQuestionForMSPINandSessionID", mSPINParameter, sessionIDParameter, programIdParameter, dayParameter);
        }
    
        public virtual ObjectResult<sp_GetAutomationErrorRecords_Result> sp_GetAutomationErrorRecords(Nullable<System.DateTime> creationDate)
        {
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAutomationErrorRecords_Result>("sp_GetAutomationErrorRecords", creationDateParameter);
        }
    
        public virtual ObjectResult<sp_CheckBiometricAppVersion_Result> sp_CheckBiometricAppVersion(string machine_Name)
        {
            var machine_NameParameter = machine_Name != null ?
                new ObjectParameter("Machine_Name", machine_Name) :
                new ObjectParameter("Machine_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckBiometricAppVersion_Result>("sp_CheckBiometricAppVersion", machine_NameParameter);
        }
    
        public virtual int sp_Update_Biometric_VersionMapping(string machine_Name, string current_Version, string current_CRC, Nullable<int> mapped_Version_Id, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var machine_NameParameter = machine_Name != null ?
                new ObjectParameter("Machine_Name", machine_Name) :
                new ObjectParameter("Machine_Name", typeof(string));
    
            var current_VersionParameter = current_Version != null ?
                new ObjectParameter("Current_Version", current_Version) :
                new ObjectParameter("Current_Version", typeof(string));
    
            var current_CRCParameter = current_CRC != null ?
                new ObjectParameter("Current_CRC", current_CRC) :
                new ObjectParameter("Current_CRC", typeof(string));
    
            var mapped_Version_IdParameter = mapped_Version_Id.HasValue ?
                new ObjectParameter("Mapped_Version_Id", mapped_Version_Id) :
                new ObjectParameter("Mapped_Version_Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_Biometric_VersionMapping", machine_NameParameter, current_VersionParameter, current_CRCParameter, mapped_Version_IdParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<sp_GetTblProgramTestCalenderDetails_Result> sp_GetTblProgramTestCalenderDetails(Nullable<int> programTestCalenderId)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTblProgramTestCalenderDetails_Result>("sp_GetTblProgramTestCalenderDetails", programTestCalenderIdParameter);
        }
    
        public virtual ObjectResult<sp_GetAttendanceReport_Evaluation_Result> sp_GetAttendanceReport_Evaluation(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> agency_Id, string sessionID, Nullable<int> faculty_Id, Nullable<int> program_Id)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var faculty_IdParameter = faculty_Id.HasValue ?
                new ObjectParameter("Faculty_Id", faculty_Id) :
                new ObjectParameter("Faculty_Id", typeof(int));
    
            var program_IdParameter = program_Id.HasValue ?
                new ObjectParameter("Program_Id", program_Id) :
                new ObjectParameter("Program_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAttendanceReport_Evaluation_Result>("sp_GetAttendanceReport_Evaluation", startDateParameter, endDateParameter, agency_IdParameter, sessionIDParameter, faculty_IdParameter, program_IdParameter);
        }
    
        public virtual int sp_Insert_Update_TblUserId_TokenMapping(Nullable<int> user_Id, string token, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(int));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Update_TblUserId_TokenMapping", user_IdParameter, tokenParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<sp_GetToken_By_UserID_Result> sp_GetToken_By_UserID(Nullable<int> user_Id)
        {
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetToken_By_UserID_Result>("sp_GetToken_By_UserID", user_IdParameter);
        }
    
        public virtual ObjectResult<SP_GetCandidateListBySessionId_V2_Result> SP_GetCandidateListBySessionId_V2(string sessionID)
        {
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCandidateListBySessionId_V2_Result>("SP_GetCandidateListBySessionId_V2", sessionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetAgencyWiseFaculty_External_Result> sp_GetAgencyWiseFaculty_External(Nullable<int> agency_Id, string parentFaculty_Code)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var parentFaculty_CodeParameter = parentFaculty_Code != null ?
                new ObjectParameter("ParentFaculty_Code", parentFaculty_Code) :
                new ObjectParameter("ParentFaculty_Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAgencyWiseFaculty_External_Result>("sp_GetAgencyWiseFaculty_External", agency_IdParameter, parentFaculty_CodeParameter);
        }
    
        public virtual ObjectResult<sp_GetProgramListByEndDate_Result> sp_GetProgramListByEndDate(Nullable<System.DateTime> endDate)
        {
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProgramListByEndDate_Result>("sp_GetProgramListByEndDate", endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetCurrentSessionIdsForReset_Result> sp_GetCurrentSessionIdsForReset()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCurrentSessionIdsForReset_Result>("sp_GetCurrentSessionIdsForReset");
        }
    
        public virtual int sp_ResetTestForSessionId(string sessioniD, Nullable<int> remainingtime, Nullable<int> day)
        {
            var sessioniDParameter = sessioniD != null ?
                new ObjectParameter("SessioniD", sessioniD) :
                new ObjectParameter("SessioniD", typeof(string));
    
            var remainingtimeParameter = remainingtime.HasValue ?
                new ObjectParameter("remainingtime", remainingtime) :
                new ObjectParameter("remainingtime", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ResetTestForSessionId", sessioniDParameter, remainingtimeParameter, dayParameter);
        }
    
        public virtual int sp_generateMarksReportDMS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_generateMarksReportDMS");
        }
    
        public virtual ObjectResult<sp_GetStudentMarksReport_V2_Result> sp_GetStudentMarksReport_V2(Nullable<System.DateTime> endDate)
        {
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStudentMarksReport_V2_Result>("sp_GetStudentMarksReport_V2", endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetFacultyList_ExternalAgency_Result> sp_GetFacultyList_ExternalAgency(Nullable<int> agency_Id, string parentFaculty_Code)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var parentFaculty_CodeParameter = parentFaculty_Code != null ?
                new ObjectParameter("ParentFaculty_Code", parentFaculty_Code) :
                new ObjectParameter("ParentFaculty_Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFacultyList_ExternalAgency_Result>("sp_GetFacultyList_ExternalAgency", agency_IdParameter, parentFaculty_CodeParameter);
        }
    
        public virtual ObjectResult<sp_GetExternalFacultyDetail_Result> sp_GetExternalFacultyDetail(Nullable<int> subFaculty_Id)
        {
            var subFaculty_IdParameter = subFaculty_Id.HasValue ?
                new ObjectParameter("SubFaculty_Id", subFaculty_Id) :
                new ObjectParameter("SubFaculty_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetExternalFacultyDetail_Result>("sp_GetExternalFacultyDetail", subFaculty_IdParameter);
        }
    
        public virtual ObjectResult<sp_GetFaceRecognitionData_Result> sp_GetFaceRecognitionData(string mSPIN)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFaceRecognitionData_Result>("sp_GetFaceRecognitionData", mSPINParameter);
        }
    
        public virtual ObjectResult<sp_GetVendorsList_Result> sp_GetVendorsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetVendorsList_Result>("sp_GetVendorsList");
        }
    
        public virtual int sp_Insert_Update_TblVendorMaster(Nullable<int> id, string fAC_Code, string vendorName, string managerName, string managerEmail, string managerMobile, string managerID, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fAC_CodeParameter = fAC_Code != null ?
                new ObjectParameter("FAC_Code", fAC_Code) :
                new ObjectParameter("FAC_Code", typeof(string));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            var managerEmailParameter = managerEmail != null ?
                new ObjectParameter("ManagerEmail", managerEmail) :
                new ObjectParameter("ManagerEmail", typeof(string));
    
            var managerMobileParameter = managerMobile != null ?
                new ObjectParameter("ManagerMobile", managerMobile) :
                new ObjectParameter("ManagerMobile", typeof(string));
    
            var managerIDParameter = managerID != null ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Update_TblVendorMaster", idParameter, fAC_CodeParameter, vendorNameParameter, managerNameParameter, managerEmailParameter, managerMobileParameter, managerIDParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual int sp_Insert_Update_TblVendorTrainerMaster(Nullable<int> id, Nullable<int> vendor_Id, string trainerCode, string trainerName, string trainerMobile, string trainerEmail, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var vendor_IdParameter = vendor_Id.HasValue ?
                new ObjectParameter("Vendor_Id", vendor_Id) :
                new ObjectParameter("Vendor_Id", typeof(int));
    
            var trainerCodeParameter = trainerCode != null ?
                new ObjectParameter("TrainerCode", trainerCode) :
                new ObjectParameter("TrainerCode", typeof(string));
    
            var trainerNameParameter = trainerName != null ?
                new ObjectParameter("TrainerName", trainerName) :
                new ObjectParameter("TrainerName", typeof(string));
    
            var trainerMobileParameter = trainerMobile != null ?
                new ObjectParameter("TrainerMobile", trainerMobile) :
                new ObjectParameter("TrainerMobile", typeof(string));
    
            var trainerEmailParameter = trainerEmail != null ?
                new ObjectParameter("TrainerEmail", trainerEmail) :
                new ObjectParameter("TrainerEmail", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Update_TblVendorTrainerMaster", idParameter, vendor_IdParameter, trainerCodeParameter, trainerNameParameter, trainerMobileParameter, trainerEmailParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<SP_GetUserDetails_VendorTrainer_Result> SP_GetUserDetails_VendorTrainer(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserDetails_VendorTrainer_Result>("SP_GetUserDetails_VendorTrainer", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_GetProgramListByEndDate_V2_Result> sp_GetProgramListByEndDate_V2(Nullable<System.DateTime> endDate)
        {
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProgramListByEndDate_V2_Result>("sp_GetProgramListByEndDate_V2", endDateParameter);
        }
    
        public virtual ObjectResult<GetActiveSessionIDListForSTEP_Agency_Trainer_Result> GetActiveSessionIDListForSTEP_Agency_Trainer(Nullable<int> agency_Id, string facultyCode)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveSessionIDListForSTEP_Agency_Trainer_Result>("GetActiveSessionIDListForSTEP_Agency_Trainer", agency_IdParameter, facultyCodeParameter);
        }
    
        public virtual ObjectResult<GetUpComingSessionIDListForSTEP_Agency_Trainer_Result> GetUpComingSessionIDListForSTEP_Agency_Trainer(Nullable<int> agency_Id, string facultyCode)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUpComingSessionIDListForSTEP_Agency_Trainer_Result>("GetUpComingSessionIDListForSTEP_Agency_Trainer", agency_IdParameter, facultyCodeParameter);
        }
    
        public virtual ObjectResult<GetPendingSessionIDListForSTEP_Agency_Trainer_Result> GetPendingSessionIDListForSTEP_Agency_Trainer(Nullable<int> agency_Id, string facultyCode)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPendingSessionIDListForSTEP_Agency_Trainer_Result>("GetPendingSessionIDListForSTEP_Agency_Trainer", agency_IdParameter, facultyCodeParameter);
        }
    
        public virtual ObjectResult<GetClosedSessionIDListForSTEP_Agency_Trainer_Result> GetClosedSessionIDListForSTEP_Agency_Trainer(Nullable<int> agency_Id, string facultyCode)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClosedSessionIDListForSTEP_Agency_Trainer_Result>("GetClosedSessionIDListForSTEP_Agency_Trainer", agency_IdParameter, facultyCodeParameter);
        }
    
        public virtual ObjectResult<GetCountersForSTEP_Agency_Trainer_Result> GetCountersForSTEP_Agency_Trainer(Nullable<int> agency_Id, string facultyCode)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountersForSTEP_Agency_Trainer_Result>("GetCountersForSTEP_Agency_Trainer", agency_IdParameter, facultyCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetVendorTrainerMaster_Result> sp_GetVendorTrainerMaster(Nullable<int> user_Id)
        {
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetVendorTrainerMaster_Result>("sp_GetVendorTrainerMaster", user_IdParameter);
        }
    
        public virtual ObjectResult<sp_GetStudentMarksReport_DistinctSession_MSPIN_Result> sp_GetStudentMarksReport_DistinctSession_MSPIN(Nullable<System.DateTime> endDate)
        {
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStudentMarksReport_DistinctSession_MSPIN_Result>("sp_GetStudentMarksReport_DistinctSession_MSPIN", endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetVendorReport_Attendance_Result> sp_GetVendorReport_Attendance(string sessionId)
        {
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetVendorReport_Attendance_Result>("sp_GetVendorReport_Attendance", sessionIdParameter);
        }
    
        public virtual ObjectResult<sp_GetVendorReport_Marks_Result> sp_GetVendorReport_Marks(string sessionId)
        {
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetVendorReport_Marks_Result>("sp_GetVendorReport_Marks", sessionIdParameter);
        }
    
        public virtual ObjectResult<sp_SessionIDsFor_AgencyManagerReport_Result> sp_SessionIDsFor_AgencyManagerReport(string managerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> program_Id, Nullable<int> trainer_Id, string sessionID)
        {
            var managerIDParameter = managerID != null ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var program_IdParameter = program_Id.HasValue ?
                new ObjectParameter("Program_Id", program_Id) :
                new ObjectParameter("Program_Id", typeof(int));
    
            var trainer_IdParameter = trainer_Id.HasValue ?
                new ObjectParameter("Trainer_Id", trainer_Id) :
                new ObjectParameter("Trainer_Id", typeof(int));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SessionIDsFor_AgencyManagerReport_Result>("sp_SessionIDsFor_AgencyManagerReport", managerIDParameter, startDateParameter, endDateParameter, program_IdParameter, trainer_IdParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDaySequence_STEPAgency_Result> sp_GetDaySequence_STEPAgency(string sessionID, string listType)
        {
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var listTypeParameter = listType != null ?
                new ObjectParameter("ListType", listType) :
                new ObjectParameter("ListType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDaySequence_STEPAgency_Result>("sp_GetDaySequence_STEPAgency", sessionIDParameter, listTypeParameter);
        }
    
        public virtual ObjectResult<GetActiveSessionIDListForSTEP_Agency_Trainer_V2_Result> GetActiveSessionIDListForSTEP_Agency_Trainer_V2(Nullable<int> agency_Id, string facultyCode)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveSessionIDListForSTEP_Agency_Trainer_V2_Result>("GetActiveSessionIDListForSTEP_Agency_Trainer_V2", agency_IdParameter, facultyCodeParameter);
        }
    
        public virtual ObjectResult<GetPendingSessionIDListForSTEP_Agency_Trainer_V2_Result> GetPendingSessionIDListForSTEP_Agency_Trainer_V2(Nullable<int> agency_Id, string facultyCode)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPendingSessionIDListForSTEP_Agency_Trainer_V2_Result>("GetPendingSessionIDListForSTEP_Agency_Trainer_V2", agency_IdParameter, facultyCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetVendorReport_Marks_V2_Result> sp_GetVendorReport_Marks_V2(string sessionId, Nullable<int> programType_Id, Nullable<int> programId)
        {
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            var programType_IdParameter = programType_Id.HasValue ?
                new ObjectParameter("ProgramType_Id", programType_Id) :
                new ObjectParameter("ProgramType_Id", typeof(int));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetVendorReport_Marks_V2_Result>("sp_GetVendorReport_Marks_V2", sessionIdParameter, programType_IdParameter, programIdParameter);
        }
    
        public virtual ObjectResult<sp_Get_IfAbesnt_v2_Result> sp_Get_IfAbesnt_v2(string mSPIN, string sessionID)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_IfAbesnt_v2_Result>("sp_Get_IfAbesnt_v2", mSPINParameter, sessionIDParameter);
        }
    
        public virtual int sp_InsertUpdate_TblCalendarDownload(string cALNDR_ID, string pRG_ID, Nullable<System.DateTime> rO_FRM_DATE, Nullable<System.DateTime> rO_TO_DATE, string prg_venue, string city, string aGENCY_CD, string fAC_CD, string region_cd, string prg_status, string shift, Nullable<int> count_EMP_CD, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var cALNDR_IDParameter = cALNDR_ID != null ?
                new ObjectParameter("CALNDR_ID", cALNDR_ID) :
                new ObjectParameter("CALNDR_ID", typeof(string));
    
            var pRG_IDParameter = pRG_ID != null ?
                new ObjectParameter("PRG_ID", pRG_ID) :
                new ObjectParameter("PRG_ID", typeof(string));
    
            var rO_FRM_DATEParameter = rO_FRM_DATE.HasValue ?
                new ObjectParameter("RO_FRM_DATE", rO_FRM_DATE) :
                new ObjectParameter("RO_FRM_DATE", typeof(System.DateTime));
    
            var rO_TO_DATEParameter = rO_TO_DATE.HasValue ?
                new ObjectParameter("RO_TO_DATE", rO_TO_DATE) :
                new ObjectParameter("RO_TO_DATE", typeof(System.DateTime));
    
            var prg_venueParameter = prg_venue != null ?
                new ObjectParameter("prg_venue", prg_venue) :
                new ObjectParameter("prg_venue", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var aGENCY_CDParameter = aGENCY_CD != null ?
                new ObjectParameter("AGENCY_CD", aGENCY_CD) :
                new ObjectParameter("AGENCY_CD", typeof(string));
    
            var fAC_CDParameter = fAC_CD != null ?
                new ObjectParameter("FAC_CD", fAC_CD) :
                new ObjectParameter("FAC_CD", typeof(string));
    
            var region_cdParameter = region_cd != null ?
                new ObjectParameter("region_cd", region_cd) :
                new ObjectParameter("region_cd", typeof(string));
    
            var prg_statusParameter = prg_status != null ?
                new ObjectParameter("prg_status", prg_status) :
                new ObjectParameter("prg_status", typeof(string));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("shift", shift) :
                new ObjectParameter("shift", typeof(string));
    
            var count_EMP_CDParameter = count_EMP_CD.HasValue ?
                new ObjectParameter("Count_EMP_CD", count_EMP_CD) :
                new ObjectParameter("Count_EMP_CD", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdate_TblCalendarDownload", cALNDR_IDParameter, pRG_IDParameter, rO_FRM_DATEParameter, rO_TO_DATEParameter, prg_venueParameter, cityParameter, aGENCY_CDParameter, fAC_CDParameter, region_cdParameter, prg_statusParameter, shiftParameter, count_EMP_CDParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual int sp_UpdateTrainer_TblCalendar(string cALNDR_ID, string pRG_ID, Nullable<System.DateTime> rO_FRM_DATE, Nullable<System.DateTime> rO_TO_DATE, string prg_venue, string region_cd, string trainerCode, Nullable<int> createdBy)
        {
            var cALNDR_IDParameter = cALNDR_ID != null ?
                new ObjectParameter("CALNDR_ID", cALNDR_ID) :
                new ObjectParameter("CALNDR_ID", typeof(string));
    
            var pRG_IDParameter = pRG_ID != null ?
                new ObjectParameter("PRG_ID", pRG_ID) :
                new ObjectParameter("PRG_ID", typeof(string));
    
            var rO_FRM_DATEParameter = rO_FRM_DATE.HasValue ?
                new ObjectParameter("RO_FRM_DATE", rO_FRM_DATE) :
                new ObjectParameter("RO_FRM_DATE", typeof(System.DateTime));
    
            var rO_TO_DATEParameter = rO_TO_DATE.HasValue ?
                new ObjectParameter("RO_TO_DATE", rO_TO_DATE) :
                new ObjectParameter("RO_TO_DATE", typeof(System.DateTime));
    
            var prg_venueParameter = prg_venue != null ?
                new ObjectParameter("prg_venue", prg_venue) :
                new ObjectParameter("prg_venue", typeof(string));
    
            var region_cdParameter = region_cd != null ?
                new ObjectParameter("region_cd", region_cd) :
                new ObjectParameter("region_cd", typeof(string));
    
            var trainerCodeParameter = trainerCode != null ?
                new ObjectParameter("TrainerCode", trainerCode) :
                new ObjectParameter("TrainerCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateTrainer_TblCalendar", cALNDR_IDParameter, pRG_IDParameter, rO_FRM_DATEParameter, rO_TO_DATEParameter, prg_venueParameter, region_cdParameter, trainerCodeParameter, createdByParameter);
        }
    
        public virtual ObjectResult<sp_GetTrainerDetails_TblCalendar_Result> sp_GetTrainerDetails_TblCalendar(string cALNDR_ID)
        {
            var cALNDR_IDParameter = cALNDR_ID != null ?
                new ObjectParameter("CALNDR_ID", cALNDR_ID) :
                new ObjectParameter("CALNDR_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTrainerDetails_TblCalendar_Result>("sp_GetTrainerDetails_TblCalendar", cALNDR_IDParameter);
        }
    
        public virtual ObjectResult<sp_GetBiometricReport_Result> sp_GetBiometricReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBiometricReport_Result>("sp_GetBiometricReport");
        }
    
        public virtual ObjectResult<sp_GetAttendanceUpdatedByRTM_Result> sp_GetAttendanceUpdatedByRTM(string agencyCode)
        {
            var agencyCodeParameter = agencyCode != null ?
                new ObjectParameter("AgencyCode", agencyCode) :
                new ObjectParameter("AgencyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAttendanceUpdatedByRTM_Result>("sp_GetAttendanceUpdatedByRTM", agencyCodeParameter);
        }
    
        public virtual ObjectResult<SP_GetCandidateListBySessionId_SSTC_Result> SP_GetCandidateListBySessionId_SSTC(string sessionID, Nullable<int> day, string region, string venue)
        {
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var venueParameter = venue != null ?
                new ObjectParameter("Venue", venue) :
                new ObjectParameter("Venue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCandidateListBySessionId_SSTC_Result>("SP_GetCandidateListBySessionId_SSTC", sessionIDParameter, dayParameter, regionParameter, venueParameter);
        }
    
        public virtual ObjectResult<sp_GetCandidatesListForSSTC_Result> sp_GetCandidatesListForSSTC(string sessionID, Nullable<int> day, string region, string venue)
        {
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var venueParameter = venue != null ?
                new ObjectParameter("Venue", venue) :
                new ObjectParameter("Venue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCandidatesListForSSTC_Result>("sp_GetCandidatesListForSSTC", sessionIDParameter, dayParameter, regionParameter, venueParameter);
        }
    
        public virtual ObjectResult<sp_GetRegistrationInfo_Result> sp_GetRegistrationInfo(string mSPIN)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetRegistrationInfo_Result>("sp_GetRegistrationInfo", mSPINParameter);
        }
    
        public virtual int sp_UpdateRegistrationInfo(Nullable<long> registration_Id, Nullable<bool> isActive)
        {
            var registration_IdParameter = registration_Id.HasValue ?
                new ObjectParameter("Registration_Id", registration_Id) :
                new ObjectParameter("Registration_Id", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateRegistrationInfo", registration_IdParameter, isActiveParameter);
        }
    
        public virtual int sp_Update_InsertIntoTblAttendance_SSTC_V2(string mSPIN, Nullable<System.DateTime> dateTime, string sessionId, Nullable<bool> isPresent, Nullable<int> day, Nullable<int> createdBy)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            var isPresentParameter = isPresent.HasValue ?
                new ObjectParameter("IsPresent", isPresent) :
                new ObjectParameter("IsPresent", typeof(bool));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_InsertIntoTblAttendance_SSTC_V2", mSPINParameter, dateTimeParameter, sessionIdParameter, isPresentParameter, dayParameter, createdByParameter);
        }
    
        public virtual ObjectResult<sp_GetSessionListForStepAgencyManager_Result> sp_GetSessionListForStepAgencyManager(Nullable<int> agency_Id, Nullable<int> vendor_Id, Nullable<int> month, string programCode)
        {
            var agency_IdParameter = agency_Id.HasValue ?
                new ObjectParameter("Agency_Id", agency_Id) :
                new ObjectParameter("Agency_Id", typeof(int));
    
            var vendor_IdParameter = vendor_Id.HasValue ?
                new ObjectParameter("Vendor_Id", vendor_Id) :
                new ObjectParameter("Vendor_Id", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var programCodeParameter = programCode != null ?
                new ObjectParameter("ProgramCode", programCode) :
                new ObjectParameter("ProgramCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSessionListForStepAgencyManager_Result>("sp_GetSessionListForStepAgencyManager", agency_IdParameter, vendor_IdParameter, monthParameter, programCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetProgramListForFilter_Vendor_Result> sp_GetProgramListForFilter_Vendor(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> vendor_Id)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var vendor_IdParameter = vendor_Id.HasValue ?
                new ObjectParameter("Vendor_Id", vendor_Id) :
                new ObjectParameter("Vendor_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProgramListForFilter_Vendor_Result>("sp_GetProgramListForFilter_Vendor", startDateParameter, endDateParameter, vendor_IdParameter);
        }
    
        public virtual ObjectResult<sp_GetSessionIdListForFilter_Result> sp_GetSessionIdListForFilter(Nullable<int> programId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> vendor_Id)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var vendor_IdParameter = vendor_Id.HasValue ?
                new ObjectParameter("Vendor_Id", vendor_Id) :
                new ObjectParameter("Vendor_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSessionIdListForFilter_Result>("sp_GetSessionIdListForFilter", programIdParameter, startDateParameter, endDateParameter, vendor_IdParameter);
        }
    
        public virtual ObjectResult<sp_GetActiveTrainerForVendor_Result> sp_GetActiveTrainerForVendor(Nullable<int> vendor_Id)
        {
            var vendor_IdParameter = vendor_Id.HasValue ?
                new ObjectParameter("Vendor_Id", vendor_Id) :
                new ObjectParameter("Vendor_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetActiveTrainerForVendor_Result>("sp_GetActiveTrainerForVendor", vendor_IdParameter);
        }
    
        public virtual ObjectResult<sp_GetActiveTrainerListForFilter_Result> sp_GetActiveTrainerListForFilter(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> vendor_Id)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var vendor_IdParameter = vendor_Id.HasValue ?
                new ObjectParameter("Vendor_Id", vendor_Id) :
                new ObjectParameter("Vendor_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetActiveTrainerListForFilter_Result>("sp_GetActiveTrainerListForFilter", startDateParameter, endDateParameter, vendor_IdParameter);
        }
    
        public virtual ObjectResult<sp_GetSessionIdsPendingForClosure_STEPAgency_Result> sp_GetSessionIdsPendingForClosure_STEPAgency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSessionIdsPendingForClosure_STEPAgency_Result>("sp_GetSessionIdsPendingForClosure_STEPAgency");
        }
    
        public virtual int sp_Insert_Update_Tbl_Multi_Nomination(string co_id, string region, string venue, string dealer_LocationCode, string dealerName, string city, string location, string agencyCode, string facultyCode, string programCode, string sessionID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> duration, string mSPIN, string name, Nullable<System.DateTime> dateofBirth, string mobileNo, Nullable<bool> isAccepted, Nullable<System.DateTime> creationDate)
        {
            var co_idParameter = co_id != null ?
                new ObjectParameter("Co_id", co_id) :
                new ObjectParameter("Co_id", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var venueParameter = venue != null ?
                new ObjectParameter("Venue", venue) :
                new ObjectParameter("Venue", typeof(string));
    
            var dealer_LocationCodeParameter = dealer_LocationCode != null ?
                new ObjectParameter("Dealer_LocationCode", dealer_LocationCode) :
                new ObjectParameter("Dealer_LocationCode", typeof(string));
    
            var dealerNameParameter = dealerName != null ?
                new ObjectParameter("DealerName", dealerName) :
                new ObjectParameter("DealerName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var agencyCodeParameter = agencyCode != null ?
                new ObjectParameter("AgencyCode", agencyCode) :
                new ObjectParameter("AgencyCode", typeof(string));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            var programCodeParameter = programCode != null ?
                new ObjectParameter("ProgramCode", programCode) :
                new ObjectParameter("ProgramCode", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateofBirthParameter = dateofBirth.HasValue ?
                new ObjectParameter("DateofBirth", dateofBirth) :
                new ObjectParameter("DateofBirth", typeof(System.DateTime));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var isAcceptedParameter = isAccepted.HasValue ?
                new ObjectParameter("IsAccepted", isAccepted) :
                new ObjectParameter("IsAccepted", typeof(bool));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Update_Tbl_Multi_Nomination", co_idParameter, regionParameter, venueParameter, dealer_LocationCodeParameter, dealerNameParameter, cityParameter, locationParameter, agencyCodeParameter, facultyCodeParameter, programCodeParameter, sessionIDParameter, startDateParameter, endDateParameter, durationParameter, mSPINParameter, nameParameter, dateofBirthParameter, mobileNoParameter, isAcceptedParameter, creationDateParameter);
        }
    
        public virtual ObjectResult<sp_getMultiNominationListbyAgency_Result> sp_getMultiNominationListbyAgency(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getMultiNominationListbyAgency_Result>("sp_getMultiNominationListbyAgency", userNameParameter);
        }
    
        public virtual int SP_BatchJobMSPIN_And_SessionId_Wise(string newMSPIN, string newSessionId)
        {
            var newMSPINParameter = newMSPIN != null ?
                new ObjectParameter("NewMSPIN", newMSPIN) :
                new ObjectParameter("NewMSPIN", typeof(string));
    
            var newSessionIdParameter = newSessionId != null ?
                new ObjectParameter("NewSessionId", newSessionId) :
                new ObjectParameter("NewSessionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BatchJobMSPIN_And_SessionId_Wise", newMSPINParameter, newSessionIdParameter);
        }
    
        public virtual ObjectResult<sp_GetNominationListForBatchJob_Result> sp_GetNominationListForBatchJob()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetNominationListForBatchJob_Result>("sp_GetNominationListForBatchJob");
        }
    
        public virtual int sp_Insert_Update_QB(Nullable<int> programId, string agencyCode, string facultyCode, string sessionID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> duration, string mSPIN, string programCode, string testCode, Nullable<int> dayCount, string typeOfTest, Nullable<int> totalNoQuestion, Nullable<int> marks_Question, Nullable<int> total_Marks, Nullable<int> programTestCalenderId, Nullable<int> testDuration, Nullable<int> evaluationTypeId, string questionPaperType, Nullable<int> set_Id)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            var agencyCodeParameter = agencyCode != null ?
                new ObjectParameter("AgencyCode", agencyCode) :
                new ObjectParameter("AgencyCode", typeof(string));
    
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("FacultyCode", facultyCode) :
                new ObjectParameter("FacultyCode", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var programCodeParameter = programCode != null ?
                new ObjectParameter("ProgramCode", programCode) :
                new ObjectParameter("ProgramCode", typeof(string));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var dayCountParameter = dayCount.HasValue ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(int));
    
            var typeOfTestParameter = typeOfTest != null ?
                new ObjectParameter("TypeOfTest", typeOfTest) :
                new ObjectParameter("TypeOfTest", typeof(string));
    
            var totalNoQuestionParameter = totalNoQuestion.HasValue ?
                new ObjectParameter("TotalNoQuestion", totalNoQuestion) :
                new ObjectParameter("TotalNoQuestion", typeof(int));
    
            var marks_QuestionParameter = marks_Question.HasValue ?
                new ObjectParameter("Marks_Question", marks_Question) :
                new ObjectParameter("Marks_Question", typeof(int));
    
            var total_MarksParameter = total_Marks.HasValue ?
                new ObjectParameter("Total_Marks", total_Marks) :
                new ObjectParameter("Total_Marks", typeof(int));
    
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var testDurationParameter = testDuration.HasValue ?
                new ObjectParameter("TestDuration", testDuration) :
                new ObjectParameter("TestDuration", typeof(int));
    
            var evaluationTypeIdParameter = evaluationTypeId.HasValue ?
                new ObjectParameter("EvaluationTypeId", evaluationTypeId) :
                new ObjectParameter("EvaluationTypeId", typeof(int));
    
            var questionPaperTypeParameter = questionPaperType != null ?
                new ObjectParameter("QuestionPaperType", questionPaperType) :
                new ObjectParameter("QuestionPaperType", typeof(string));
    
            var set_IdParameter = set_Id.HasValue ?
                new ObjectParameter("Set_Id", set_Id) :
                new ObjectParameter("Set_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Update_QB", programIdParameter, agencyCodeParameter, facultyCodeParameter, sessionIDParameter, startDateParameter, endDateParameter, durationParameter, mSPINParameter, programCodeParameter, testCodeParameter, dayCountParameter, typeOfTestParameter, totalNoQuestionParameter, marks_QuestionParameter, total_MarksParameter, programTestCalenderIdParameter, testDurationParameter, evaluationTypeIdParameter, questionPaperTypeParameter, set_IdParameter);
        }
    
        public virtual ObjectResult<sp_SelectRandom_Ques_Set_Result> sp_SelectRandom_Ques_Set(string mSPIN, Nullable<int> programTestCalenderId)
        {
            var mSPINParameter = mSPIN != null ?
                new ObjectParameter("MSPIN", mSPIN) :
                new ObjectParameter("MSPIN", typeof(string));
    
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectRandom_Ques_Set_Result>("sp_SelectRandom_Ques_Set", mSPINParameter, programTestCalenderIdParameter);
        }
    
        public virtual ObjectResult<Sp_Question_Detail_Result> Sp_Question_Detail(Nullable<int> programTestCalenderId, Nullable<int> set_Id)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var set_IdParameter = set_Id.HasValue ?
                new ObjectParameter("Set_Id", set_Id) :
                new ObjectParameter("Set_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Question_Detail_Result>("Sp_Question_Detail", programTestCalenderIdParameter, set_IdParameter);
        }
    
        public virtual ObjectResult<Sp_GetLanguageWiseQuestionList_Result> Sp_GetLanguageWiseQuestionList(Nullable<int> programTestCalenderId, Nullable<int> langId, Nullable<int> set_Id)
        {
            var programTestCalenderIdParameter = programTestCalenderId.HasValue ?
                new ObjectParameter("ProgramTestCalenderId", programTestCalenderId) :
                new ObjectParameter("ProgramTestCalenderId", typeof(int));
    
            var langIdParameter = langId.HasValue ?
                new ObjectParameter("LangId", langId) :
                new ObjectParameter("LangId", typeof(int));
    
            var set_IdParameter = set_Id.HasValue ?
                new ObjectParameter("Set_Id", set_Id) :
                new ObjectParameter("Set_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetLanguageWiseQuestionList_Result>("Sp_GetLanguageWiseQuestionList", programTestCalenderIdParameter, langIdParameter, set_IdParameter);
        }
    }
}
